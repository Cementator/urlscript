{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\nif (process.env.NODE_ENV !== 'production') {\r\n    require('dotenv').config();\r\n}\r\n\r\nimport axios from \"axios\";\r\nimport moment = require(\"moment\");\r\nimport cheerio = require(\"cheerio\");\r\nimport crypto = require(\"crypto\")\r\nconst fs = require('fs').promises;\r\n\r\n\r\n\r\nclass parsingText {\r\n\r\n    textInside: string = ''\r\n    arrayOfUrls: string[] = []\r\n\r\n\r\n    // Checks input for file or for input through the terminal\r\n    checkInput() {\r\n\r\n        if (process.argv.length < 3) {\r\n            console.log('Please input: text you want to parse for urls');\r\n            process.stdin.on('data', (chunk) => {\r\n                this.textInside += chunk;\r\n                this.readInput()\r\n            });\r\n\r\n        }\r\n        if(process.argv[2]){\r\n            fileHandle.readFile(process.argv[2])\r\n        }\r\n\r\n    }\r\n\r\n    // main function to start reading file\r\n    async readFile(filePath: string) {\r\n        try {\r\n            this.textInside = await fs.readFile(filePath, 'utf8')\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n            process.exit(1);\r\n        }\r\n        this.findUrl()\r\n\r\n        await this.getResponse()\r\n    }\r\n\r\n    async readInput() {\r\n        this.findUrl()\r\n\r\n        await this.getResponse()\r\n    }\r\n\r\n\r\n    // timer async function, needs to be awaited\r\n    async secondsTimeout(ms: number | undefined) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, ms)\r\n        })\r\n    }\r\n\r\n    // this functions parses text file and searches for urls inside it\r\n    findUrl() {\r\n\r\n\r\n        let temporaryUrls: string[] = []\r\n        let stateOfOpenBracket: number = 0\r\n        let isBackSlashBeforeBracket: boolean = false\r\n        let temporaryString: string = ''\r\n\r\n\r\n        for(let i = 0; i < this.textInside.length - 1; i++){\r\n\r\n            let character: any = this.textInside.charAt(i)\r\n\r\n            if(character==='\\\\' && stateOfOpenBracket === 0){\r\n                temporaryString = temporaryString.concat(character)\r\n            }\r\n\r\n            if(stateOfOpenBracket === 1 && isBackSlashBeforeBracket === false){\r\n                if(character ===']'|| character ==='[' || character === ' ' || character === /\\r/ || character === /\\n/){\r\n                    let foundUrl:string[] | null = temporaryString.match(/(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/i)\r\n\r\n                    if(foundUrl !== null) {\r\n                        temporaryUrls.push(foundUrl[0])\r\n                    }\r\n                    temporaryString = ''\r\n\r\n                }\r\n                if((character !== '['&& character !== \"]\") && (character !== /\\r/ && character !== /\\n/) && (character !== ' ' && character !== '\\\\')){\r\n                    temporaryString = temporaryString.concat(character)\r\n                }\r\n\r\n            }\r\n\r\n            if(character === '['){\r\n\r\n                if(stateOfOpenBracket === 0){\r\n                    if(temporaryString.charAt(temporaryString.length-1) === '\\\\') {\r\n                        isBackSlashBeforeBracket = true\r\n                        temporaryString = ''\r\n                    }\r\n                }\r\n\r\n                stateOfOpenBracket++\r\n            }\r\n\r\n            else if(character === ']'){\r\n                if(stateOfOpenBracket === 1){\r\n                    isBackSlashBeforeBracket = false\r\n                    if(temporaryUrls.length > 0){\r\n                        if(!this.arrayOfUrls.includes(temporaryUrls[temporaryUrls.length-1]))\r\n                            this.arrayOfUrls.push(temporaryUrls[temporaryUrls.length-1])\r\n                        temporaryUrls = []\r\n                    }\r\n                }\r\n                stateOfOpenBracket--\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // encrypt found email into hexadecimal hash\r\n    encryptEmail(email:string) {\r\n\r\n        const secret = process.env.IM_SECRET\r\n        // @ts-ignore\r\n        let hashValue = crypto.createHash('sha256', secret)\r\n            .update(email)\r\n            .digest('hex');\r\n\r\n        return hashValue\r\n    }\r\n\r\n    // for given array of urls gets webpages data\r\n    async getResponse() {\r\n        const arr: string[] = this.arrayOfUrls\r\n\r\n        if(arr.length === 0 && process.argv[2]){\r\n            console.log(`No web pages found in file : ${process.argv[2]}`)\r\n        }\r\n\r\n        for (let urlAddress of arr) {\r\n\r\n            let loadTime:number = 0\r\n            const beforeGet: number = moment.now()\r\n\r\n            await axios.get(\"https://\" + urlAddress).then((response) =>{\r\n\r\n                const afterGet:any = moment.now()\r\n\r\n                loadTime = moment(afterGet).diff(beforeGet)\r\n\r\n                if(response.status === 200){\r\n\r\n                    this.parseUrlResponse(urlAddress, response.data)\r\n                }\r\n\r\n            },(error)=>{\r\n\r\n                this.tryUrlAgain(urlAddress)\r\n            })\r\n\r\n            if(loadTime < 1000){\r\n                await this.secondsTimeout(1000 - loadTime)\r\n            }\r\n        }\r\n    }\r\n\r\n    // writes stdout in terminal for given url\r\n    async parseUrlResponse(urlAddress: string, dataFromResponse: string | cheerio.Node | cheerio.Node[] | Buffer){\r\n\r\n        let url: string = urlAddress\r\n        let title: string = cheerio.load(dataFromResponse)('title').text()\r\n        let stringifiedData: string = dataFromResponse.toString()\r\n        let email: RegExpMatchArray = stringifiedData.match(/[a-z0-9A-Z]+\\.?[a-z0-9A-Z]+@[a-z0-9A-Z]+\\.[a-z0-9A-Z]+/) || []\r\n        let encryptedEmail:string = ''\r\n\r\n        if(email[0]){\r\n            encryptedEmail = this.encryptEmail(email[0])\r\n        }\r\n\r\n        let pageInformations: any = {\r\n            url: url,\r\n            title: title || undefined,\r\n            email: encryptedEmail  || undefined\r\n        }\r\n        this.outputResponse(pageInformations)\r\n\r\n    }\r\n\r\n    // print parsed page information in terminal\r\n\r\n    outputResponse(pageInformations: any){\r\n      //  if(process.argv[2]){\r\n            process.stdout.write(JSON.stringify(pageInformations,null, )+ \"\\n\")\r\n  //      }\r\n\r\n    }\r\n\r\n    // this function is called when we cannot get status 200 from the response\r\n    // it makes second request after 60 seconds and if it doesn't succeed print error in stderr\r\n    async tryUrlAgain(urlAddress:string){\r\n\r\n        await this.secondsTimeout(60000)\r\n        let loadTime:number = 0\r\n        const beforeGet: number = moment.now()\r\n\r\n        await axios.get(\"https://\" + urlAddress).then((response) =>{\r\n\r\n            const afterGet:any = moment.now()\r\n\r\n            loadTime = moment(afterGet).diff(beforeGet)\r\n\r\n            if(response.status === 200){\r\n\r\n                this.parseUrlResponse(urlAddress, response.data)\r\n            }\r\n\r\n        },(error)=>{\r\n            process.stderr.write(error.message+ \"\\n\")\r\n\r\n        })\r\n        if(loadTime < 1000){\r\n            await this.secondsTimeout(1000 - loadTime)\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nconst fileHandle: parsingText = new parsingText();\r\n\r\nfileHandle.checkInput()\r\n\r\n\r\n\r\n"]}